<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_frogBase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.frogsSaved = 0;
global.frogType = irandom_range(0,2);
global.timer = 0;
global.hasWaited = false;
global.turnNumber = 0;



//If this is not a random Level then set the global.frogCounterTotal and force the frogs to be what we want!!!
var roomname = room_get_name(room);
show_debug_message("ROOM NAME" + string(roomname));
if(!roomname == "randomLevel")
{
    global.frogCounterTotal = instance_number(obj_frog);
}

//WHAT TYPE OF FROG IS IT?!
show_debug_message("THIS IS HOW MANY FROGS THERE ARE IN THIS Norm ROOM" +string(global.frogCounterTotal));
if(global.frogType == 0)
{
   sprite_index = spr_frogGreen;
}

if(global.frogType == 1)
{
   sprite_index = spr_frogRed;
}
if(global.frogType == 2)
{
   sprite_index = spr_frogPurple;
}





 
 

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("ALARM TWO WAITING HAS BEEN TRIGGERED");
//global.hasWaited = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//game Design tools
if(keyboard_check_pressed(ord("L")))
{
    room_goto_next();
}
if(keyboard_check_pressed(ord("K")))
{
    room_goto_previous();
}
if(keyboard_check_pressed(ord("R")))
{
    game_restart();
}


//image_speed = 1.2;

//MOVING/Timing VARIABLES

distToCheck = 63;
distToSpot = 64;
speedToMove = 2.9;
    
letsGo = false;
moving = false;
movingUpDwn = y;
movingLR = x;
aFrogGreen = false;
aFrogRed = false;
aFrogPurple = false;
frogRndTiming = 6;


//UP DOWN LEFT RIGHT 0 1 2 3
jumpDir = 0;

        //CHeck are we moving????
        if(speed &gt; 0)
        {
        canMove = false;
        }
        if(speed &lt;= 0)
        {
        canMove = true;
        }
    /*
    //RANDOMLY PLAY IDLE ANIMATIONS - Code isn't good. Need another solution.
    global.timer = irandom(500);
    if(global.timer = 5)&amp;&amp;(canMove == true)
    {
        sprite_index = THE FROG IDLE ANIMATION!!! 
    }
    */
    
//DETERMINE WHICH FROG I AM!!

if(sprite_index == spr_frogGreen)||(sprite_index == spr_frogGreen_idle_01)
{
aFrogGreen = true;
}  
if(sprite_index = spr_frogRed)||(sprite_index == spr_frogRed_idle_01)
{
aFrogRed = true;
} 
if(sprite_index = spr_frogPurple)||(sprite_index == spr_frogPurple_idle_01)
{
aFrogPurple = true;
} 
//-----------------------------change speed if you're a purple frog-----------------------------
if(aFrogPurple == true)
    {
         speedToMove = 5;
     }
//-----------------------------change speed if you're a purple frog-----------------------------
//GREEN FROG MOVE RULES
if(aFrogGreen == true)
{ 
whatsMySpriteInd = sprite_index;

    if(keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("W"))
        {
            movingUpDwn = y-distToCheck;
            letsGo = true;
            jumpDir = 0;
            alarm_set(2, -1)
        }

    if(keyboard_check_pressed(ord("S")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("S"))
        {
            movingUpDwn = y+distToCheck;
            letsGo = true;
            jumpDir = 1;
            alarm_set(2, -1)
        }
   
    if(keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("A"))
        {
            movingLR = x-distToCheck;
            letsGo = true;
            jumpDir = 2;
            alarm_set(2, -1)
        }

    if(keyboard_check_pressed(ord("D")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("D"))
        {
            movingLR = x+distToCheck;
            letsGo = true;
            jumpDir = 3;
            alarm_set(2, -1)
        }
   
}


//RED FROG MOVE RULES
if(aFrogRed == true)
{
  whatsMySpriteInd = sprite_index;
    if(keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("W"))
        {
            movingUpDwn = y+distToCheck;
            letsGo = true;
            jumpDir = 0;
            alarm_set(2, -1)
        }

    if(keyboard_check_pressed(ord("S")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("S"))
        {
            movingUpDwn = y-distToCheck;
            letsGo = true;
            jumpDir = 1;
            alarm_set(2, -1)
        }
   
    if(keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("A"))
        {
            movingLR = x+distToCheck;
            letsGo = true;
            jumpDir = 2;
            alarm_set(2, -1)
        }

    if(keyboard_check_pressed(ord("D")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("D"))
        {
            movingLR = x-distToCheck;
            letsGo = true;
            jumpDir = 3;
            alarm_set(2, -1)
        }
        
}
        
//PURPLE FROG MOVE RULES
if(aFrogPurple == true)
{
  whatsMySpriteInd = sprite_index;
    if(keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("W"))
        {
            movingUpDwn = y-distToCheck;
            movingLR = x-distToCheck;
            letsGo = true;
            jumpDir = 0;
            alarm_set(2, -1)
        }

    if(keyboard_check_pressed(ord("S")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("S"))
        {
            movingUpDwn = y+distToCheck;
            movingLR = x+distToCheck;
            letsGo = true;
            jumpDir = 1;
            alarm_set(2, -1)
        }
   
    if(keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("A"))
        {
            movingUpDwn = y-distToCheck;
            movingLR = x+distToCheck;
            letsGo = true;
            jumpDir = 2;
            alarm_set(2, -1)
        }

    if(keyboard_check_pressed(ord("D")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
        {
            //Set a random alarm to wait to move.
            alarm_set(2, irandom_range(0,frogRndTiming));
        }
    if (alarm[2] = 0)&amp;&amp;(keyboard_lastkey = ord("D"))
        {
            movingUpDwn = y+distToCheck;
            movingLR = x-distToCheck;
            letsGo = true;
            jumpDir = 3;
            alarm_set(2, -1)
        }
    
}

           
            //LETS GET MOVING!!!----------------------------Start the turn?--------------
              if(letsGo == true)&amp;&amp;(canMove==true)
            {
                global.turnNumber ++;
                global.actualTurnNum = round(global.turnNumber/instance_number(obj_frog));
                show_debug_message("TURNNUMBER " + string(global.actualTurnNum));
                
                /* THIS IS CRAPPY NEED TO FIX
                //Kill all idle animation objects
                with(obj_frogGreen_idle_01)
                {
                    instance_destroy();
                }
                */
                
                //Check if there's a tile there.
                spotToMove = instance_nearest(movingLR, movingUpDwn, obj_tile);
                distToSpot = point_distance(x, y, spotToMove.x, spotToMove.y);
                tileExists = instance_place(movingLR, movingUpDwn, obj_tile);
                
                //If a tile isnt there YOU DON"T MOVE!
                if(tileExists == -4)
                {
                     //show_debug_message("A TILE IS THERE: " + string(tileExists));
                     spotToMove = instance_nearest(x, y, obj_tile);
                     jumpDir = 99;
                     THIS ISNT WORKIGN!
                     show_debug_message("NO JUMPING?: " + string(jumpDir));
                }
                

            
                    //Move to that spot 
                    //If there is no frog or cross there you can move.
                    if(!position_meeting(spotToMove.x,spotToMove.y,obj_frog))
                    &amp;&amp;(!position_meeting(spotToMove.x,spotToMove.y,obj_cross))
                    {
                          // make the correct jump anim play!! 
                          if(aFrogGreen == true)
                          {
                              if(jumpDir = 0)
                              {
                                sprite_index = spr_frogGreen_jumpUp;
                              }
                              if(jumpDir = 1)
                              {
                                sprite_index = spr_frogGreen_jumpDown;
                              }
                              if(jumpDir = 2)
                              {
                                sprite_index = spr_frogGreen_jumpLeft;
                              }
                              if(jumpDir = 3)
                              {
                                sprite_index = spr_frogGreen_jumpRight;
                              }
                              if(jumpDir = 99)
                              {
                                sprite_index = spr_frogGreen_jumpUp;
                              }
                              
                          }
                          if(aFrogRed == true)
                          {
                              if(jumpDir = 0)
                              {
                                sprite_index = spr_frogRed_jumpUp;
                              }
                              if(jumpDir = 1)
                              {
                                sprite_index = spr_frogRed_jumpDown;
                              }
                              if(jumpDir = 2)
                              {
                                sprite_index = spr_frogRed_jumpLeft;
                              }
                              if(jumpDir = 3)
                              {
                                sprite_index = spr_frogRed_jumpRight;
                              }
                              if(jumpDir = 99)
                              {
                                sprite_index = spr_frogGreen_jumpUp;
                              }
                          }
                          if(aFrogPurple == true)
                          {
                              if(jumpDir = 0)
                              {
                                sprite_index = spr_frogPurple_jumpUp;
                              }
                              if(jumpDir = 1)
                              {
                                sprite_index = spr_frogPurple_jumpUp;
                              }
                              if(jumpDir = 2)
                              {
                                sprite_index = spr_frogPurple_jumpUp;
                              }
                              if(jumpDir = 3)
                              {
                                sprite_index = spr_frogPurple_jumpUp;
                              }
                              if(jumpDir = 99)
                              {
                                sprite_index = spr_frogGreen_jumpUp;
                              }
                          }
                          
                        //move to that spot---------------------------------------
                        instance_create(spotToMove.x, spotToMove.y, obj_cross);
                        move_towards_point(spotToMove.x,spotToMove.y,speedToMove);
                      
                    }
                    moving = true; 
                    letsGo = false;
                    canMove = false;
                    
            }
            
                //If we are moving start checking how far we are from the spot.
                if(moving == true)
                    {
                        distToSpot = point_distance(x, y, spotToMove.x, spotToMove.y);
                        canMove = false;
                    }
                    
//Stop the thing when it gets to the place and turn it back into a frog
         if (place_meeting(x, y, obj_cross))
        {
            speed = 0;
            moving = false;
            x = spotToMove.x;
            y = spotToMove.y;
            canMove = true;  
            sprite_index = whatsMySpriteInd;
            audio_play_sound(snd_frogland, 1, false); 
        }
        
        if(place_meeting(x,y,obj_goal))
        {
            instance_destroy();
            instance_create(spotToMove.x,spotToMove.y,obj_splash);
            global.frogsSaved ++;
            audio_play_sound(snd_frogInGoal,1,false);
        }
        if(place_meeting(x,y,obj_poisonedGoal))
        {
            instance_destroy();
            instance_create(spotToMove.x,spotToMove.y,obj_death);
            instance_create(x,y,effect_shake);
            global.frogsSaved ++;
        }  
        
      /* this is now in the SPLASH animation
        if(global.frogsSaved &gt;= global.frogCounterTotal+1)
        {
                room_goto(room_next(room)); 
        }
        */
        

   
    
    

    
     



    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_frog">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle= random_range(-45, 45);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
