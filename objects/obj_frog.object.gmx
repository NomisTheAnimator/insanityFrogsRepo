<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_frogBase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.frogsSaved = 0;
global.frogType = irandom_range(0,1);

//If this is not a random Level then set the global.frogCounterTotal and force the frogs to be what we want!!!
var roomname = room_get_name(room);
show_debug_message("ROOM NAME" + string(roomname));
if(!roomname == "randomLevel")
{
    global.frogCounterTotal = instance_number(obj_frog);
}

//WHAT TYPE OF FROG IS IT?!
show_debug_message("THIS IS HOW MANY FROGS THERE ARE IN THIS Norm ROOM" +string(global.frogCounterTotal));
if(global.frogType == 0)
{
   sprite_index = spr_frogGreen;
}

if(global.frogType == 1)
{
   sprite_index = spr_frogRed;
}





 
 

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//MOVING VARIABLES


distToCheck = 63;
distToSpot = 64;

letsGo = false;
moving = false;
movingUpDwn = y;
movingLR = x;



if(speed &gt; 0)
{
canMove = false;
}

if(speed &lt;= 0)
{
canMove = true;
}




//GREEN FROG MOVE RULES
if(sprite_index == spr_frogGreen)
{ 
    if(keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
    {
        movingUpDwn = y-distToCheck;
        letsGo = true;
    }
    if(keyboard_check_pressed(ord("S")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
    {
        movingUpDwn = y+distToCheck;
        letsGo = true;
    }
    if(keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
    {
        movingLR = x-distToCheck;
        letsGo = true;
    }
    if(keyboard_check_pressed(ord("D")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
    {
        movingLR = x+distToCheck;
        letsGo = true;
    }
    
}
//RED FROG MOVE RULES
if(sprite_index = spr_frogRed)
{
    if(keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
    
    {
       movingUpDwn = y+distToCheck;
        letsGo = true;    
    }
    if(keyboard_check_pressed(ord("S")))
    &amp;&amp;(!keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("D")))
    {
        movingUpDwn = y-distToCheck;
        letsGo = true;
    }
    if(keyboard_check_pressed(ord("A")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
    {
        movingLR = x+distToCheck;
        letsGo = true;
    }
    if(keyboard_check_pressed(ord("D")))
    &amp;&amp;(!keyboard_check_pressed(ord("W")))
    &amp;&amp;(!keyboard_check_pressed(ord("S")))
    {
        movingLR = x-distToCheck;
        letsGo = true;
    }
    
}

            if(letsGo == true)&amp;&amp;(canMove==true)
            {
                    
                //Check if there's a tile there.
                spotToMove = instance_nearest(movingLR, movingUpDwn, obj_tile); 
                distToSpot = point_distance(x, y, spotToMove.x, spotToMove.y);
                
                    //Move to that spot 
                    //If there is no frog or cross there you can move.
                    if(!position_meeting(spotToMove.x,spotToMove.y,obj_frog))
                    &amp;&amp;(!position_meeting(spotToMove.x,spotToMove.y,obj_cross))
                    {
                        instance_create(spotToMove.x, spotToMove.y, obj_cross);
                        move_towards_point(spotToMove.x,spotToMove.y,5);
                    }
                    moving = true; 
                    letsGo = false;
                    canMove = false;
                    
            }
            
                //If we are moving start checking how far we are from the spot.
                if(moving == true)
                    {
                        distToSpot = point_distance(x, y, spotToMove.x, spotToMove.y);
                        canMove = false;
                    }
                    
//Stop the thing when it gets to the place
         if (place_meeting(x, y, obj_cross))
        {
        speed = 0;
        moving = false;
        x = spotToMove.x;
        y = spotToMove.y;
        canMove = true;  
     
        }
        if(place_meeting(x,y,obj_goal))
        {
            instance_destroy();
            instance_create(spotToMove.x,spotToMove.y,obj_splash);
            global.frogsSaved ++;
        }
        if(place_meeting(x,y,obj_poisonedGoal))
        {
            instance_destroy();
            instance_create(spotToMove.x,spotToMove.y,obj_death);
            global.frogsSaved ++;
        }  
        
        if(global.frogsSaved &gt;= global.frogCounterTotal)
        {
            game_restart();
        }
        
        show_debug_message("global.frogCounterTotal: "+ string(global.frogCounterTotal));
        show_debug_message("global.frogsSaved: "+ string(global.frogsSaved));
   
    
    

    
     



    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_frog">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle= random_range(-45, 45);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
